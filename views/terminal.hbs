{{> header }}
<script src="https://js.stripe.com/terminal/v1/"></script>

<main class="flex flex-col bg-gray-100 items-center h-full">

  <div class="bg-gray-50 pt-12 sm:pt-16">
    
  </div>

  <div class="py-16 bg-white overflow-hidden lg:py-24">
    <div class="relative max-w-xl mx-auto px-4 sm:px-6 lg:px-8 lg:max-w-7xl">
      <div class="relative">
        <h2 class="text-center text-4xl leading-10 font-extrabold tracking-tight text-gray-900 sm:text-4xl">
          Terminal Payment
        </h2>
        <p class="mt-4 max-w-3xl mx-auto text-xl leading-7 font-normal text-center text-gray-500">
          พุดดิ้ง - S$10
        </p>
      </div>
      <div class="relative mt-12 lg:mt-24 lg:grid lg:grid-cols-2 lg:gap-8">
        <div class="relative pt-2">

          <div class="mt-10 xxs:mx-auto md:mx-0 md:ml-auto relative lg:mt-0 w-full flex flex-col justify-center" aria-hidden="true">
            <img class="relative mx-auto" width="200" src="/images/sapaad-terminal.png" alt="">

          <button id="terminal-submit" class="mx-auto px-8 py-2 mt-10 border-transparent rounded-full shadow-sm text-base font-medium text-white bg-green-800 hover:bg-green-900 active:ring-2 active:ring-offset-2 active:ring-green-900">
               <span id="status-text">Connect to Reader</span>
            </button>
          <button id="button-submit" class="mx-auto px-8 py-2 mt-10 border-transparent rounded-full shadow-sm text-base font-medium text-white bg-green-800 hover:bg-green-900 active:ring-2 active:ring-offset-2 active:ring-green-900">
               <span id="button-text">Submit POS Payment</span>
            </button>
          </div>
        </div>
        <div class="mt-10 xxs:mx-auto md:mx-0 md:ml-auto relative lg:mt-0 w-full" aria-hidden="true">
          <img class="relative mx-auto" width="890" src="/images/blog-3-full.jpeg" alt="">
        </div>
      </div>
    </div>
  </div>
</main>
{{> footer }}
<script>
    (() => {

    var terminal = StripeTerminal.create({
      onFetchConnectionToken: fetchConnectionToken,
      onUnexpectedReaderDisconnect: unexpectedDisconnect,
    });

    function unexpectedDisconnect() {
      // You might want to display UI to notify the user and start re-discovering readers
    }

    function fetchConnectionToken() {
  // Your backend should call /v1/terminal/connection_tokens and return the JSON response from Stripe
      return fetch('/fetchConnectionToken', { method: "POST" })
        .then(function(response) {
          return response.json();
        })
        .then(function(data) {
          return data.secret;
        });
    }

    function discoverReaders() {
      const config = {simulated: false, location: '{{LOCATION_ID}}'}
      terminal.discoverReaders(config).then(function(discoverResult) {
        if (discoverResult.error) {
          console.log('Failed to discover: ', discoverResult.error);
        } else if (discoverResult.discoveredReaders.length === 0) {
          console.log('No available readers.');
        } else {
          // You should show the list of discoveredReaders to the
          // cashier here and let them select which to connect to (see below).
          connectReader(discoverResult);
        }
      });
    }

    function connectReader(discoverResult) {
      // Just select the first reader here.
      var selectedReader = discoverResult.discoveredReaders[0];

      terminal.connectReader(selectedReader).then(function(connectResult) {
        if (connectResult.error) {
          console.log('Failed to connect: ', connectResult.error);
          document.querySelector("#status-text").textContent = 'Failed to connect: ' + connectResult.error;

        } else {
          console.log('Connected to reader: ', connectResult.reader.label);
          document.querySelector("#status-text").textContent = 'Connected to reader: '+ connectResult.reader.label;
        }
      });
    }
    
  var submit_button = document.getElementById('button-submit');
  var terminal_button = document.getElementById('terminal-submit');

  var payment_intent_id = "";

  terminal_button.addEventListener('click', async function(event) {
    discoverReaders();
  });

  submit_button.addEventListener('click', async function(event) {
    
    submitting(true)
    const response = await fetch('/processTerminal', {
        method: 'POST',
        body: JSON.stringify({
          reader_id: '{{reader_id}}',
        }),
        headers: {
          'Content-Type': 'application/json',
          Accept: 'application/json',
        },
      });

      if (!response.ok) {
        throw new Error(`Error! status: ${response.status}`);
      }
      else {
        payment_intent = await response.json();
        terminal.collectPaymentMethod(payment_intent.client_secret).then(function(result) {
        if (result.error) {
            // Placeholder for handling result.error
          } else {
            orderComplete(result.paymentIntent)
          }
        });
      }
  }, false);

  let payment_intent = {};
  // Show success message when payment is complete
  function orderComplete(paymentIntent) {
    terminal.processPayment(paymentIntent).then(function(result) {
      if (result.error) {
          document.querySelector("#button-text").textContent = "Failed payment : " + result.paymentIntent.id
      } else if (result.paymentIntent) {
          submitting(false);
      }
    });
      
  }
  // Update button submitting state
  var submitting = function(isSubmitting) {
    if (isSubmitting) {
      document.querySelector("#button-submit").disabled = true;
      document.querySelector("#button-text").textContent = "Submitting Payment..."
    } else {
      document.querySelector("#button-submit").disabled = false;
      document.querySelector("#button-text").textContent = "Successful Payment"
    }
  };  
  })();
</script>
