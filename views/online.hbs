{{> header }}
<main class="flex flex-col bg-gray-100 items-center h-full">

  <div class="bg-gray-50 pt-12 sm:pt-16">
    
  </div>

  <div class="py-16 bg-white overflow-hidden rounded-lg shadow-lg ">
    <div class="relative max-w-xl mx-auto px-4 sm:px-6 lg:px-8 lg:max-w-7xl">
      <div class="relative">
        <h2 class="text-center text-4xl leading-10 font-extrabold tracking-tight text-green-900 sm:text-4xl">
          {{__ "product.onlinepayment" }}
        </h2>
        <p class="mt-4 max-w-3xl mx-auto text-xl leading-7 font-normal text-center text-gray-500">
          {{product.name}} - ${{product.display_price}}
        </p>
      </div>
      <div class="relative mt-12 lg:mt-24 lg:grid lg:grid-cols-2 lg:gap-8">
        <div class="relative pt-2">
            <div id="payment-request-button" style="padding-bottom:20px">
              <div id="pay-button-element">
                <!-- Pay Button Element will be inserted here -->
              </div>
              <div id="error-message">
                <!-- Display error message to your customers here -->
              </div>
             <!-- A Stripe Element will be inserted here. -->
            </div>
            <form id="payment-form">
              <div id="payment-element">
                <!--Stripe.js injects the Payment Element-->
              </div>
              <div class="w-full bg-white flex flex-row-reverse content-center mt-4">
              
              <button id="submit">
                <div class="spinner hidden" id="spinner"></div>
                <span id="button-text" class="ml-8 inline-flex items-center justify-center px-8 py-3 border border-transparent rounded-full shadow-sm text-base font-medium text-white bg-green-800 hover:bg-green-900 active:ring-2 active:ring-offset-2 active:ring-green-900">
              {{__ "product.pay" }} ${{product.display_price}}
            </span>
              </button>
              <div id="payment-message" class="hidden"></div>
              </div>
        </form>
        </div>
        <div class="mt-10 xxs:mx-auto md:mx-0 md:ml-auto relative lg:mt-0 w-full rounded-lg" aria-hidden="true">
          <img class="relative mx-auto rounded-lg shadow-lg" width="890" src="{{product.local_img}}" alt="">
        </div>
      </div>
    </div>
  </div>
</main>
{{> footer }}
<script>
  (() => {
    
    let elements;

initialize();
checkStatus();

document
  .querySelector("#payment-form")
  .addEventListener("submit", handleSubmit);

async function initialize() {

const  clientSecret  = "{{clientSecret}}";

const options = {
  mode: 'payment',
  amount: {{product.price}},
  currency: 'sgd',
  payment_method_types: {{{json product.payment_method_types}}},

  // Customizable with appearance API.
};

  elements = stripe.elements(options);


  // Pay Button Element implementation
  if ( {{product.show_pay_button}} ){
      const payButtonElement = elements.create('payButton', {
        // One of 'auto', 'vertical', or 'horizontal'. Defaults to 'auto'.
        layout: 'auto',
        // Specify a type per payment method
        // Defaults to 'buy' for Google, 'plain' for Apple, and 'paypal' for PayPal
      // buttonType: {
        // googlePay: 'checkout',
        // applePay: 'check-out',
        // paypal: 'buynow',
        //},
        wallets: {{{json product.upe_wallets}}},
        // Specify a theme per payment method
        // Default theme is based on appearance API settings
        buttonTheme: {
          applePay: 'white-outline'
        },
        // Height in pixels. Defaults to 44. The width is always '100%'.
        height: 55
      });
      payButtonElement.mount('#pay-button-element');

      payButtonElement.on('ready', ({availablePaymentMethods}) => {
      if (!availablePaymentMethods) {
        // No buttons will show
      } else {
      }
    });

    payButtonElement.on('click', (event) => {
      const options = {
        lineItems: [
          {
            name: "{{product.name}}",
            amount: {{product.display_price}}
          },
        ]
      };
      event.resolve(options);
    });

    payButtonElement.on('confirm', async (event) => {
      const {error} = await stripe.confirmPayment({
        // `elements` instance used to create the Pay Button Element
        elements,
        // `clientSecret` from the created PaymentIntent
        clientSecret,
        confirmParams: {
          return_url:  window.location.protocol + "//" + window.location.host + '/success?product={{product.id}}',
        },
      });

      if (error) {
        // This point is only reached if there's an immediate error when
        // confirming the payment. Show the error to your customer (for example, payment details incomplete)
        const messageContainer = document.querySelector('#error-message');
        messageContainer.textContent = error.message;
      } else {
        // The payment UI automatically closes with a success animation.
        // Your customer is redirected to your `return_url`.
      }
    });
    }
  const paymentElement = elements.create("payment",{
    appearance: {theme: 'stripe',},
    layout: {{{json product.layout}}},
    paymentMethodOrder: {{{json product.payment_methods_order}}},
    wallets: {{{json product.upe_wallets}}}
  });
  paymentElement.mount("#payment-element");
  
}

async function handleSubmit(e) {
  e.preventDefault();
  setLoading(true);
  const clientSecret = "{{clientSecret}}";
  const { error } = await stripe.confirmPayment({
    elements,
    clientSecret,
    confirmParams: {
      // Make sure to change this to your payment completion page
      return_url: window.location.protocol + "//" + window.location.host + '/success?product={{product.id}}',
    },
  });

  // This point will only be reached if there is an immediate error when
  // confirming the payment. Otherwise, your customer will be redirected to
  // your `return_url`. For some payment methods like iDEAL, your customer will
  // be redirected to an intermediate site first to authorize the payment, then
  // redirected to the `return_url`.
  if (error.type === "card_error" || error.type === "validation_error") {
    showMessage(error.message);
  } else {
    showMessage("An unexpected error occurred.");
  }
  setLoading(false);
}

// Fetches the payment intent status after payment submission
async function checkStatus() {
  const clientSecret = new URLSearchParams(window.location.search).get(
    "payment_intent_client_secret"
  );

  if (!clientSecret) {
    return;
  }

  const { paymentIntent } = await stripe.retrievePaymentIntent(clientSecret);

  switch (paymentIntent.status) {
    case "succeeded":
      showMessage('{{__ "online.succeeded" }}');
      break;
    case "in_progress":
      showMessage('{{__ "online.processing" }}');
      break;
    case "requires_payment_method":
      showMessage('{{__ "online.requires_payment_method" }}');
      break;
    default:
      showMessage('{{__ "online.error" }}');
      break;
  }
}

// ------- UI helpers -------

function showMessage(messageText) {
  const messageContainer = document.querySelector("#payment-message");

  messageContainer.classList.remove("hidden");
  messageContainer.textContent = messageText;

  setTimeout(function () {
    messageContainer.classList.add("hidden");
    messageText.textContent = "";
  }, 4000);
}

// Show a spinner on payment submission
function setLoading(isLoading) {
  if (isLoading) {
    // Disable the button and show a spinner
    document.querySelector("#submit").disabled = true;
    document.querySelector("#spinner").classList.remove("hidden");
    document.querySelector("#button-text").classList.remove("bg-green-800");
    document.querySelector("#button-text").classList.add("bg-gray-400");
    document.querySelector("#button-text").textContent = '{{__ "online.processing" }}';
  } else {
    document.querySelector("#submit").disabled = false;
    document.querySelector("#spinner").classList.add("hidden");
    document.querySelector("#button-text").classList.add("bg-green-800");
    document.querySelector("#button-text").classList.remove("bg-gray-400");
    document.querySelector("#button-text").textContent = '{{__ "product.pay" }} ${{product.display_price}}';

  }
}
    
  })();
</script>
