{{> header }}
<main class="flex flex-col bg-gray-100 items-center h-full">

  <div class="bg-gray-50 pt-12 sm:pt-16">
    
  </div>

  <div class="py-16 bg-white overflow-hidden lg:py-24">
    <div class="relative max-w-xl mx-auto px-4 sm:px-6 lg:px-8 lg:max-w-7xl">
      <div class="relative">
        <h2 class="text-center text-4xl leading-10 font-extrabold tracking-tight text-gray-900 sm:text-4xl">
          QR Payment
        </h2>
        <p class="mt-4 max-w-3xl mx-auto text-xl leading-7 font-normal text-center text-gray-500">
          บาร์บีคิวสุดวิเศษ - $700
        </p>
      </div>
      <div class="relative mt-12 lg:mt-24 lg:grid lg:grid-cols-2 lg:gap-8">
        <div class="relative pt-2">

        <div class="mt-10 xxs:mx-auto md:mx-0 md:ml-auto relative lg:mt-10 w-full" aria-hidden="true">
          <img class="relative mx-auto" width="400" src="/images/scan_to_pay.png" alt="">
        </div>
        </div>
        <div class="mt-10 xxs:mx-auto md:mx-0 md:ml-auto relative lg:mt-0 w-full" aria-hidden="true">
          <img class="relative mx-auto" width="890" src="/images/blog-2-full.jpeg" alt="">
        </div>
      </div>
    </div>
  </div>
</main>
{{> footer }}
<script>
  (() => {
    
    let elements;

initialize();
checkStatus();

document
  .querySelector("#payment-form")
  .addEventListener("submit", handleSubmit);

async function initialize() {

  const  clientSecret  = "{{clientSecret}}";

  const appearance = {
    theme: 'stripe',
  };
  elements = stripe.elements({ appearance, clientSecret });

  const paymentElement = elements.create("payment");
  paymentElement.mount("#payment-element");
}

async function handleSubmit(e) {
  e.preventDefault();
  setLoading(true);

  const { error } = await stripe.confirmPayment({
    elements,
    confirmParams: {
      // Make sure to change this to your payment completion page
      return_url: "http://localhost:4567/success",
    },
  });

  // This point will only be reached if there is an immediate error when
  // confirming the payment. Otherwise, your customer will be redirected to
  // your `return_url`. For some payment methods like iDEAL, your customer will
  // be redirected to an intermediate site first to authorize the payment, then
  // redirected to the `return_url`.
  if (error.type === "card_error" || error.type === "validation_error") {
    showMessage(error.message);
  } else {
    showMessage("An unexpected error occurred.");
  }
  setLoading(false);
}

// Fetches the payment intent status after payment submission
async function checkStatus() {
  const clientSecret = new URLSearchParams(window.location.search).get(
    "payment_intent_client_secret"
  );

  if (!clientSecret) {
    return;
  }

  const { paymentIntent } = await stripe.retrievePaymentIntent(clientSecret);

  switch (paymentIntent.status) {
    case "succeeded":
      showMessage("Payment succeeded!");
      break;
    case "processing":
      showMessage("Your payment is processing.");
      break;
    case "requires_payment_method":
      showMessage("Your payment was not successful, please try again.");
      break;
    default:
      showMessage("Something went wrong.");
      break;
  }
}

// ------- UI helpers -------

function showMessage(messageText) {
  const messageContainer = document.querySelector("#payment-message");

  messageContainer.classList.remove("hidden");
  messageContainer.textContent = messageText;

  setTimeout(function () {
    messageContainer.classList.add("hidden");
    messageText.textContent = "";
  }, 4000);
}

// Show a spinner on payment submission
function setLoading(isLoading) {
  if (isLoading) {
    // Disable the button and show a spinner
    document.querySelector("#submit").disabled = true;
    document.querySelector("#spinner").classList.remove("hidden");
    document.querySelector("#button-text").classList.add("hidden");
  } else {
    document.querySelector("#submit").disabled = false;
    document.querySelector("#spinner").classList.add("hidden");
    document.querySelector("#button-text").classList.remove("hidden");
  }
}
    
  })();
</script>
